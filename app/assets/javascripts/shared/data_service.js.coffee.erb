<% api_service = NdsApiService.new %>

DataService = ($rootScope) ->
  $service = @
  $service.formatMealsForFilter = (mealsList) ->
    [
      {
        label: 'No Preference'
        value: null
      },
      {
        label: 'Yes'
        value: mealsList
      },
      # TODO: Find out how we can query the API for no meals offered. The value
      # here is a dummy value until we figure that out.
      {
        label: 'No'
        value: ['No meals']
      }
    ]


  $service.providerData =
    financialAssistance: <%= api_service.filter_data('financial_assistance').to_json %>

  $service.filterData =
    careApproaches: <%= api_service.filter_data('care_approaches') %>
    ageGroupTypes: <%= api_service.filter_data('age_group_types').to_json.delete("\n") %>
    days: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
    financialAssistance: $service.providerData.financialAssistance.filter((a) -> a.showInFilter)
    languageImmersionPrograms: <%= api_service.filter_data('language_immersion_programs') %>
    languages: <%= api_service.filter_data('languages') %>.map((lang) -> lang.trim())
    neighborhoods: <%= api_service.filter_data('neighborhoods') %>
    meals: $service.formatMealsForFilter(<%= api_service.filter_data('meals') %>)
    pottyTraining: [{label: 'No Preference', value: null}, {label: 'Yes', value: 'Potty Training'}]
    religiousPrograms: ['Catholic Religion', 'Jewish Religion']
    shiftFeatures: <%= api_service.filter_data('shift_features').to_json %>
    typesOfCare: [{id: 1, name: 'Child Care Center'}, {id: 2, name: 'Family Child Care'}]
    vacancyTypes: ['Available Now', 'Future Date']
    yearlySchedules: [{label: 'Full Year', value: 'FULL_YEAR'}, {label: 'School Year Only', value: 'SCHOOL_YEAR'}, {label: 'Summer Only', value: 'SUMMER_ONLY'}]
    zipCodes: <%= api_service.filter_data('zip_codes') %>

  $service.filters =
    address: null
    ageGroupServiced: null
    attributesLocal3: [''] # contains language immersion program names
    financialAssistance: []
    careApproaches: ['']
    languages: ['']
    meals: null
    monthlyRate: [0, 1500]
    neighborhoods: ['']
    parentCoop: false
    pottyTraining: null
    religiousPrograms: ['']
    typeOfCare: []
    vacancyFutureDate: null
    vacancyType: null
    zipCodes: ['']

  $service.searchResultsData = {
    currentPage: 0
    isFirstPage: true
    isLastPage: true
    isLoading: false
    providers: []
    pageSize: 15
    totalNumProviders: 0
  }

  $service.searchSettings = {
    locationType: 'address'
  }

  $service.parent = {
    full_name: ''
    email: ''
    phone: ''
    home_zip_code: ''
    near_address: ''
    agree: false
    subscribe: false
    found_option_id: null
    parents_care_reasons_attributes: ['']
    parents_care_types: []
    children: [
      {
        ageWeeks: 130
        selected: true
        shiftFeatures: ['Full Time']
        weeklySchedule: $service.filterData.days.slice(0, 5)
        yearlySchedule: 'FULL_YEAR'
      }
    ]
  }

  $service.setParent = (currentParent) ->
    children = angular.merge($service.parent.children, currentParent.last_search.parent.children)
    # use tmpParent to limit resolve cycles
    tmpParent = angular.merge($service.parent, currentParent.last_search.parent)
    tmpParent.children = children
    tmpParent.agree = true
    $service.parent = tmpParent
    $service.filters = Object.assign($service.filters, currentParent.last_search.providers)
    $service.setSettings(currentParent.last_search)
    $service.cleanAddressFilters()

    $rootScope.$broadcast('data-service:updated', $service);

  $service.setSettings = (lastSearch) ->
    settings = angular.copy $service.searchSettings
    if lastSearch.providers.attributesLocal17
      settings.locationType = 'neighborhoods'
      $service.filters.neighborhoods = lastSearch.providers.attributesLocal17
    else
      if $service.filters.zip
        settings.locationType = 'zipCodes'
        $service.filters.zipCodes = $service.filters.zip
    $service.searchSettings = settings

  $service.cleanAddressFilters = () ->
    filters = angular.copy $service.filters
    delete filters.locationA
    delete filters.attributesLocal17
#    delete filters.attributesLocal3
    delete filters.zip
    $service.filters = filters

  $rootScope.$on 'auth:validation-success', (event, user) ->
    $service.setParent(user)

  $rootScope.$on 'auth:login-success', (event, user) ->
    $service.setParent(user)

  $service.resetData = ->
    $service.searchResultsData.providers = []
    $service.searchResultsData.totalNumProviders = 0

  $service

DataService.$inject = ['$rootScope']
angular.module('CCR').service('DataService', DataService)

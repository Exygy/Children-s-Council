<% api_service = NdsApiService.new %>

DataService = ($rootScope, HttpService) ->
  @filterData =
    neighborhoods: <%= api_service.filter_data('neighborhoods') %>
    zipCodes: <%= api_service.filter_data('zip_codes') %>

  @data = {
    totalProviders: 0
    providersPerPage: 15
    providers: []
    is_loading: false
  }

  @settings = {
    locationType: 'near_address'
  }

  @parent = {
    full_name: ''
    email: ''
    phone: ''
    home_zip_code: ''
    near_address: ''
    agree: false
    subscribe: false
    found_option_id: null
    parents_care_reasons_attributes: ['']
    parents_care_types_attributes: []
    children: [
      {
        age_weeks: 130,
        schedule_day_ids: [2,3,4,5,6]
        children_schedule_days_attributes: []
        schedule_week_ids: [1]
        children_schedule_weeks_attributes: []
        schedule_year_id: 1
        selected: true
      }
    ]
  }

  @filters = {
    ageGroupServiced: null
    near_address: null
    co_op: null
    meals_included: null
    potty_training: null
    language_ids: ['']
    program_ids: []
    subsidy_ids: []
    language_immersion_ids: ['']
    religion_ids: ['']
    care_approach_ids: ['']
    attributesLocal17: ['']
    zip: ['']
    care_type_ids: []
  }

  @current_page = 1

  @setSearchLocation = (params) ->
    if @settings.locationType == 'near_address'
      if params.near_address and params.near_address.indexOf(', San Francisco, CA') == -1
        params.locationA = params.near_address + ', San Francisco, CA'
      else
        params.locationA = params.near_address
      delete params.zip
      delete params.attributesLocal17
    else if @settings.locationType == 'zipCodes'
      # We are allowing users to select multiple zip codes in the form,
      # but the NDS API does not yet support searching by multiple zip
      # codes, so we are passing through just the first selected zip code
      # for now. We are keeping the form as-is because we believe the API
      # will be updated to allow searching by multiple zip codes by the
      # time we make this app live.
      params.zip = params.zip[0]
      delete params.near_address
      delete params.attributesLocal17
    else if @settings.locationType == 'neighborhoods'
      delete params.near_address
      delete params.zip

  @buildParent = ->
    @parent.parents_care_types_attributes = @filters.care_type_ids.map (care_type_id) ->
      { 'care_type_id': care_type_id }

  @buildChildren = ->
    for child, index in @parent.children
      @parent.children[index].children_schedule_days_attributes = []
      if child.schedule_day_ids
        for schedule_day_id in child.schedule_day_ids
          @parent.children[index].children_schedule_days_attributes.push { schedule_day_id: schedule_day_id }

      @parent.children[index].children_schedule_weeks_attributes = []
      if child.schedule_week_ids
        for schedule_week_id in child.schedule_week_ids
          @parent.children[index].children_schedule_weeks_attributes.push { schedule_week_id: schedule_week_id }

  @concatProgramsIds = ->
    program_ids = []
    if @filters.language_immersion_ids.length and @filters.language_immersion_ids[0] != ''
      program_ids = program_ids.concat @filters.language_immersion_ids
    if @filters.religion_ids.length and @filters.religion_ids[0] != ''
      program_ids = program_ids.concat @filters.religion_ids
    if @filters.care_approach_ids.length and @filters.care_approach_ids[0] != ''
      program_ids = program_ids.concat @filters.care_approach_ids
    program_ids

  @getSearchParams = ->
    @buildParent()
    @buildChildren()
    search_params = angular.copy @filters

    # those params should be children specific when the feature is built
    search_params.ageGroupServiced = @parent.children[0].age_weeks
    search_params.schedule_year_ids = [@parent.children[0].schedule_year_id]
    search_params.schedule_week_ids = @parent.children[0].schedule_week_ids
    search_params.schedule_day_ids = @parent.children[0].schedule_day_ids

    search_params.program_ids = @concatProgramsIds()
    delete search_params.language_immersion_ids
    delete search_params.religion_ids
    delete search_params.care_approach_ids
    @setSearchLocation(search_params)
    search_params

  @cleanEmptyParams = (params) ->
    deepFilter params, (value, key) ->
      # Filter out empty values and arrays
      if !value? or (Array.isArray(value) and (value.length == 0 or value[0] == '')) then false else true

  @getCleanedParent = ->
    parent = angular.copy @parent
    delete parent.care_type_ids
    delete parent.agree
    for child, index in parent.children
      delete parent.children[index].schedule_day_ids
      delete parent.children[index].schedule_week_ids
      delete parent.children[index].selected
    parent

  @queryParams = ->
    @cleanEmptyParams {
      page: @current_page
      per_page: @data.providersPerPage
      providers: @getSearchParams()
      parent: @getCleanedParent()
    }

  @httpParams = ->
    {
      method: 'POST'
      url: '/api/providers'
      data: @queryParams()
    }

  @performSearch = (callback) =>
    that = @
    that.data.providers = []
    that.data.is_loading = true
    @serverRequest (response) ->
      if response.data
        that.data.providers = response.data.content
        that.data.totalProviders = response.data.totalElements
        that.data.current_page = that.data.number
      callback(response.data) if callback
      that.data.is_loading = false

  @serverRequest = (callback) ->
    HttpService.http @httpParams(), callback

  @resetData = ->
    @data.providers = []
    @data.totalProviders = 0

  @

DataService.$inject = ['$rootScope', 'HttpService']
angular.module('CCR').service('DataService', DataService)
